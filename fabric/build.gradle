plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"
    modImplementation "earth.terrarium.athena:athena-fabric-1.21:${athena_version}"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    modImplementation "com.cobblemon:fabric:${project.cobblemon_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_api_fabric}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_fabric}"
    modApi "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_fabric}"

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.21"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
